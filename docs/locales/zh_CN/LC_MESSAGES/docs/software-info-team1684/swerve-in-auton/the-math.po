# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Daniel Webber (mendax1234)
# This file is distributed under the same license as the 6940 Swerve package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# zhang jiaming, 2022
# Daniel Webber, 2022
# Transifex Bot <>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 6940 Swerve\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-05 20:09+0000\n"
"PO-Revision-Date: 2022-07-04 16:26+0000\n"
"Last-Translator: Transifex Bot <>, 2022\n"
"Language-Team: Chinese (China) (https://www.transifex.com/frc-team-6940-1/teams/135321/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:2
#: 0ab9a7644d19468eb6978b9836a61c1c
msgid "The Math Behind the Magic"
msgstr "神奇的移动背后的数学原理"

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:3
#: 19964263ad5f4e8cb281e0b7973e185b
msgid ""
"One of the core differences when operating in autonomous mode is that the "
"robot can't receive information about where it is from the driver, in the "
"form of controls. Early on, we established that we want to accurately and "
"repeatably control our movements and actions. To do this, the robot needs to"
" know where it is at all times - or at least have a good guess. This is "
"known as `odometry <https://en.wikipedia.org/wiki/Odometry>`_ within the "
"field of robotics. Without accurate odometry, we're forced to use `dead "
"reckoning <https://en.wikipedia.org/wiki/Dead_reckoning>`_ , or worse, time-"
"based movements at approximate speeds."
msgstr ""
"自动模式下的移动与手动模式下最核心的区别就在于自动模式下的机器人不能从driver那里获得任何信息。因此，为了可以精确地并且重复地控制机器人的移动与动作，机器人需要知道它在赛场的何方——或者至少有个大概的猜测。这一过程在机器人的领域中被称为"
"  `odometry "
"<https://en.wikipedia.org/wiki/Odometry>`_。如果没有办法精确地预测机器人的位置，我们就智能被迫采用 `dead"
" reckoning <https://en.wikipedia.org/wiki/Dead_reckoning>`_ "
"，即死记硬背法。甚至，我们可能会需要采用基于时间的控制方法"

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:10
#: a975566760f34466a9a6ab942a739a8f
msgid ""
"In order to perform our odometry, we decided to use our wheel encoders "
"combined with a gyroscope. By performing the reverse of what we do in "
"teleop, which is taking an intended output pose and figuring out what each "
"individual actuator should be doing to achieve that pose. Again, a pose is "
"simply a set of unique characteristics describing the robot's position or "
"motion at an instant in time. By taking information about the velocity and "
"direction of each wheel and combining it using the kinematics we described "
"in section 2.1, we can obtain an overall velocity of the robot in two "
"directions; this is referred to as Forward Kinematics, or FK. By integrating"
" this over time (just multiplying the velocity at this time with the time "
"step of the controller), we can get our position."
msgstr ""
"为了执行我们的odometry，我们决定将我们的车轮编码器与陀螺仪相结合。执行与我们在手动控制中所做的反向运动学计算，设定一个预定的输出姿态，并找出每个单独的这轮应该如何运动来实现该姿态。同时，一个姿态只是一组描述机器人在某一瞬间的位置或运动的独特特征。而通过获取每个瞬间各个车轮的速度和方向的信息，并使用我们在第2.1节中描述的运动学进行组合，我们可以得到机器人在两个方向上的整体速度，进而通过对时间积分（只需将此时的速度与控制器的时间步长相乘），得到我们的位置，这一个过程被称为“正向运动学”，即FK"

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:20
#: cd0dc996adb6451e9edcf1966cfafcb3
msgid "Forward Kinematics (FK)"
msgstr "正向运动学（FK）"

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:21
#: 3bfe724132e544dab0dc25e4eda76616
msgid ""
"Of course, going from wheel encoders to overall velocity is not entirely "
"straightforward. The problem comes when we look at our information and "
"desired results: we have eight variables, four wheel speeds and four "
"directions, and we want three outputs: the robot's forward, sideways, and "
"rotational velocity. If you're familiar with algebra, especially linear "
"algebra, you might recognize that this makes our system overdefined. We have"
" more information than we need, and can't obtain an exact analytic solution."
" There's a couple ways to solve this. By `setting up the exact equations and"
" putting them into a computer algebra system "
"<https://www.chiefdelphi.com/t/paper-4-wheel-independent-drive-independent-"
"steering-swerve/107383>`_ , or by assembling the equations in a matrix-"
"vector format and using a linear equation solver, we can obtain a “best-fit”"
" to the system."
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:30
#: a45f9966c9324fd596d140e36bd9d5ea
msgid ""
"However, this sort of inexact fitting can be difficult to implement, often "
"requiring inclusion of extra libraries. Due to the time sensitivity of the "
"season, we chose to take a simplified approach. `Courtesy of Kyle Lanman of "
"team 2841, we adapted an algorithm "
"<https://www.chiefdelphi.com/t/calculating-odometry-of-a-swerve-"
"drive/160043/6>`_ that averages variables until we get from eight down to "
"the three we need. While we expect this to be less accurate than more "
"advanced methods, we found it to be remarkably accurate after calibration. "
"As long as wheel speeds and acceleration are kept below the point where "
"they'd slip under normal conditions, this proves to be a suitable odometry "
"method for the limitations of the 15 second autonomous period, especially "
"when combined with other sensors to “close the loop” on navigation."
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:39
#: c37c732423e44b92bda1fa30388711b8
msgid ""
"In this formulation of forward kinematics, we start from a position where we"
" assume we know our wheel speeds and wheel angles; call them with "
":math:`ws_{FR}`, :math:`ws_{FL}`, :math:`wa_{RL}`,and so on, with F/R and "
"L/R again representing front/rear and left/right. Using motors that have a "
"built in encoder, such as CTRE Falcon 500s or REV Neos, is advantageous for "
"determining wheel speed."
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:44
#: 2b9300437ce9446b90856d607a7bdf2e
msgid ""
"We do need to make sure we've consistent, physically meaningful values for "
"our wheel speeds. Whether we're using encoders built into the motor or ones "
"installed manually, they're likely putting out some counter of ticks, or "
"count of revolutions, or some speed of ticks/second or revolutions/second. "
"We'll need to use this in combination with our drivetrain reduction and "
"wheel diameter to get some conversion rate, and thus be able to get our "
"wheel speeds in units of distance per time, like in/sec, ft/sec, or m/sec."
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:51
#: fc8aa54593794edcb7d94bc5cd5fd5b4
msgid ""
"We can first calculate A, B, C, and D values from our wheelspeeds and "
"angles, but this time, we're going to calculate them for each wheel. These "
"will be in units of velocity (distance per me), as we're simply multiplying "
"our wheel speed (which has those units) by an angle component."
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:55
#: 3a7fb9effc97405882df3db3a17905e7
msgid ""
"B_{FL} = sin(wa_{FL}) * ws_{FL}\n"
"\n"
msgstr ""
"B_{FL} = sin(wa_{FL}) * ws_{FL}\n"
"\n"

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:56
#: f25c6dc619304852b01102dc6d990603
msgid ""
"D_{FL} = cos(wa_{FL}) * ws_{FL}\n"
"\n"
msgstr ""
"D_{FL} = cos(wa_{FL}) * ws_{FL}\n"
"\n"

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:57
#: 3113e634b54d4900b970a7175cb65b56
msgid ""
"B_{FR} = sin(wa_{FR}) * ws_{FR}\n"
"\n"
msgstr ""
"B_{FR} = sin(wa_{FR}) * ws_{FR}\n"
"\n"

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:58
#: 1f130ee857d848c69f62b3afa156453e
msgid ""
"C_{FR} = cos(wa_{FR}) * ws_{FR}\n"
"\n"
msgstr ""
"C_{FR} = cos(wa_{FR}) * ws_{FR}\n"
"\n"

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:59
#: 8764f57704b149b59c8422dd594308e1
msgid ""
"A_{RL} = sin(wa_{RL}) * ws_{RL}\n"
"\n"
msgstr ""
"A_{RL} = sin(wa_{RL}) * ws_{RL}\n"
"\n"

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:60
#: b99bdeb5bc94401a838ccfe6973a8a2b
msgid ""
"D_{RL} = cos(wa_{RL}) * ws_{RL}\n"
"\n"
msgstr ""
"D_{RL} = cos(wa_{RL}) * ws_{RL}\n"
"\n"

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:61
#: 2e39ac7b513c4905957c6a5ab69e9d42
msgid ""
"A_{RR} = sin(wa_{RR}) * ws_{RR}\n"
"\n"
msgstr ""
"A_{RR} = sin(wa_{RR}) * ws_{RR}\n"
"\n"

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:62
#: 8fbd3c6e10b64a698d56c68b85b71334
msgid ""
"C_{RR} = cos(wa_{RR}) * ws_{RR}\n"
"\n"
msgstr ""
"C_{RR} = cos(wa_{RR}) * ws_{RR}\n"
"\n"

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:64
#: d632cfbd401f4ed78a264834b5a491d9
msgid ""
"Well that wasn't much help with simplifying our variables! In order to make "
"this more reasonable, we're going to do some averaging. For each value of A,"
" B, C, and D, we're going to take the two values we have, and average them. "
"These averaged values will still have units of velocity, as they're just "
"averaging two other velocity values."
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:69
#: cb2dc028ab154153bd9f9ae0101f0900
msgid ""
"A = (A_{RR} + A_{RL})/2\n"
"\n"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:70
#: 5a5a366c84ce4e6eacffd7389d084b49
msgid ""
"B = (B_{FL} + A_{FR})/2\n"
"\n"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:71
#: 55e45b417fae4e39a6acb3ef85bad03b
msgid ""
"C = (C_{FR} + C_{RR})/2\n"
"\n"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:72
#: 48c0637f566f44a49c490c33a16168d4
msgid ""
"D = (D_{FL} + D_{RL})/2\n"
"\n"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:74
#: b054cc871d424a42a45449e96d54187e
msgid ""
"Excellent, that's brought our complexity down some. Now we need to find our "
"rotational velocity, or ROT. For this, we need physically accurate "
"measurements of what we earlier defined as the length and width of our "
"wheelbase, L and W. Then, we'll calculate the possible rotational velocity "
"from our knowledge about the front/back (A/B) and left/right (C/D) "
"velocities, and average those again to get a single value. Note that it's "
"also possible to get this ROT value (which should be in radians/second) from"
" a gyroscope, which we should already have on our robot so we can drive "
"field-centric."
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:81
#: c073e2e95c494f11be7aab1afbb5a0df
msgid ""
"ROT_{1} = (B − A)/L\n"
"\n"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:82
#: 6f250e4912d44993a64745f575368431
msgid ""
"ROT_{2} = (C − D)/W\n"
"\n"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:83
#: a3e3a5c48a114117b17f451a60cb21d3
msgid ""
"ROT = (ROT_{1} + ROT_{2})/2\n"
"\n"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:85
#: b2d9017d7673424d85e9102079f0dd1b
msgid ""
"From here, we're simply going to incorporate this with our geometry and A, "
"B, C, D values to obtain (again) two values each for forward and strafe "
"velocities, and average them to get our final estimates of forward and "
"strafe speed."
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:89
#: 3b7c501a94974222a9f98be6e3467c52
msgid ""
"FWD_{1} = ROT * (L/2) + A\n"
"\n"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:90
#: 2562f5ceb4294cda91afb2fe57ad4816
msgid ""
"FWD_{2} = − ROT * (L/2) + B\n"
"\n"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:91
#: 6b60e57df3f446e59f59256c72d00b3f
msgid ""
"FWD = (FWD_{1} + FWD_{2})/2\n"
"\n"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:93
#: dacb97a7989646548cef55e86a9f5931
msgid ""
"STR_{1} = ROT * (W/2) + C\n"
"\n"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:94
#: 3f2a4d53f299491fa6ac9082a8fe12a3
msgid ""
"STR_{2} = − ROT * (W/2) + D\n"
"\n"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:95
#: 36ec34c593604e05a812375e06ac0ec1
msgid ""
"STR = (STR_{1} + STR_{2})/2\n"
"\n"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:97
#: 821f9dc086cf4c4f88b5c44959189b2f
msgid ""
"Great! Now we've got something to work with. If we want our distance values "
"to be usefu l, though, these velocities should be transformed so they're "
"field-centric. Back to our trusty field centric transformation, we'll again "
"need our angle relative to the field, usually provided by a gyroscope."
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:101
#: 0f4651f83f6246eaad295f1f200b311c
msgid ""
"FWD_{new} = FWD * cos(θ) + STR * sin(θ)\n"
"\n"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:102
#: feff6b1c1adc4e76b47b1bacda414d68
msgid ""
"STR_{new} = STR * cos(θ) − FWD * sin(θ)\n"
"\n"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:105
#: 524bcb52bc224090a8a5f6714339d603
msgid "Odometry"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:106
#: c564939c645a45c59e2eb78f1efd86ba
msgid ""
"From there, we can now figure out how fast we're actually going along the "
"field - pretty nifty! To get to a position, we just need to integrate these "
"over time. This is as simple as initializing a timer and comparing its value"
" at the current loop run to its value in the previous run to determine our "
"timestep . For most robot code, this timestep is somewhere around 0.020 "
"seconds, or 20 milliseconds; however, this is only a nominal value, and it "
"can vary up and down (mostly up) depending on the behavior of the robot's "
"code. In any case, we can take this timestep and our speed and integrate it "
"into an accumulator value to get our position relative to where we started "
"counting."
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:120
#: 3db3ea8ab89148a3870b86a9b1412a0f
msgid ""
"We're calling our axis associated with strafing along and our axis "
"associated with moving forward or back across. This turned out to facilitate"
" communication within our team more easily than axis conventions like x/y/z."
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:124
#: 0aed9ef0c341471194491fe89f21c07f
msgid ""
"We now have our odometry. When using it in autonomous routines, we reset "
"this value to zero at the start, and consider our coordinates relative to "
"where the robot starts. This means robot positioning is very important, as "
"any error will be carried through the odometry."
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:128
#: 3c39405029914c2aba3d58cf706259f1
msgid ""
"When you add the change every cycle, you always know where that wheel is. "
"The same is done for the other 3 wheels. We use that information to find the"
" center of the robot. The direction that the robot is facing could also be "
"determined in the same manner, but we chose to use our gyros for that. We "
"only store the current position of the center of the robot. We do , however,"
" send that position to the dashboard and record the data there. We are able "
"to graph out the position that the robot reported and impose it over a map "
"of the field to allow us to make improvements to our autons even without "
"having access to the robot."
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:136
#: c47b82e956e24f8285e528a0e3aea776
msgid ""
"The next part of the puzzle is to tell the robot where to go next. We "
"reverse the tracking process to instruct each wheel on where to go next. We "
"input the desired x,y coordinate into the subroutine. The angle that each "
"wheel needs to face is calculated. The angle will be the same for all wheels"
" unless the robot is going to spin while moving. If the robot will be "
"changing heading while moving, the amount of turn correction will be "
"factored in causing the wheels to face different directions and have "
"different relative speeds until the spin portion is achieved. We use a "
"positioning loop to assign the wheel speed. We are only using kP * error. We"
" can change states by several different criteria. We might use an achieved "
"distance, an intake sensor, or a targeting feedback to tell the robot that "
"it is done with that task. The robot then moves on to the next task."
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:147
#: 8af7232e342940d5a2e984501f06352f
msgid "Calibration"
msgstr ""

#: ../source/docs/software-info-team1684/swerve-in-auton/the-math.rst:148
#: 376a32d6bade4f9bb0a4b4ffc4bc369b
msgid ""
"If we used our nominal wheel diameters and gear ratios, these values should "
"be pretty close to real-world values, but they probably won't be perfect. "
"We'll want to calibrate our overall speeds by applying a multiplier. This "
"calibration can be as simple as marking off a set distance (the longer the "
"better) and driving the robot across this distance, keeping it as straight "
"as possible. Once the distance is reached, the reported distance value can "
"be compared with the actual distance value and ratioed to produce a "
"correction factor - actual distance over reported distance. This can also be"
" used to account for wheel wear, which changes the effective wheel diameter "
"and can cause inaccurate distance measurements when not accounted for."
msgstr ""
