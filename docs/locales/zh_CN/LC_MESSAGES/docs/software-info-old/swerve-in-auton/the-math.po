# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Wenbo Zhu (mendax1234)
# This file is distributed under the same license as the 6940 Swerve package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 6940 Swerve\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-29 11:14+0800\n"
"PO-Revision-Date: 2022-06-29 03:50+0000\n"
"Language-Team: Chinese (China) (https://www.transifex.com/frc-team-6940-1/teams/135321/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:2
#: 0239f8c057da430680b5ff61e8374c97
msgid "The Math Behind the Magic"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:3
#: 98f56b8978e64d9c98eea90f2736ca8c
msgid ""
"One of the core differences when operating in autonomous mode is that the "
"robot can't receive information about where it is from the driver, in the "
"form of controls. Early on, we established that we want to accurately and "
"repeatably control our movements and actions. To do this, the robot needs to"
" know where it is at all times - or at least have a good guess. This is "
"known as `odometry <https://en.wikipedia.org/wiki/Odometry>`_ within the "
"field of robotics. Without accurate odometry, we're forced to use `dead "
"reckoning <https://en.wikipedia.org/wiki/Dead_reckoning>`_ , or worse, time-"
"based movements at approximate speeds."
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:10
#: 568d6869eb3741998da2c87183ce6155
msgid ""
"In order to perform our odometry, we decided to use our wheel encoders "
"combined with a gyroscope. By performing the reverse of what we do in "
"teleop, which is taking an intended output pose and figuring out what each "
"individual actuator should be doing to achieve that pose. Again, a pose is "
"simply a set of unique characteristics describing the robot's position or "
"motion at an instant in time. By taking information about the velocity and "
"direction of each wheel and combining it using the kinematics we described "
"in section 2.1, we can obtain an overall velocity of the robot in two "
"directions; this is referred to as Forward Kinematics, or FK. By integrating"
" this over time (just multiplying the velocity at this time with the time "
"step of the controller), we can get our position."
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:20
#: 661c6471fae74f6b96668d8e0d9d1527
msgid "Forward Kinematics (FK)"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:21
#: 72890aeb339c488a966c5b7aa92aef19
msgid ""
"Of course, going from wheel encoders to overall velocity is not entirely "
"straightforward. The problem comes when we look at our information and "
"desired results: we have eight variables, four wheel speeds and four "
"directions, and we want three outputs: the robot's forward, sideways, and "
"rotational velocity. If you're familiar with algebra, especially linear "
"algebra, you might recognize that this makes our system overdefined. We have"
" more information than we need, and can't obtain an exact analytic solution."
" There's a couple ways to solve this. By `setting up the exact equations and"
" putting them into a computer algebra system "
"<https://www.chiefdelphi.com/t/paper-4-wheel-independent-drive-independent-"
"steering-swerve/107383>`_ , or by assembling the equations in a matrix-"
"vector format and using a linear equation solver, we can obtain a “best-fit”"
" to the system."
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:30
#: 2a9ade4c00904a679d127b45319b94a4
msgid ""
"However, this sort of inexact fitting can be difficult to implement, often "
"requiring inclusion of extra libraries. Due to the time sensitivity of the "
"season, we chose to take a simplified approach. `Courtesy of Kyle Lanman of "
"team 2841, we adapted an algorithm "
"<https://www.chiefdelphi.com/t/calculating-odometry-of-a-swerve-"
"drive/160043/6>`_ that averages variables until we get from eight down to "
"the three we need. While we expect this to be less accurate than more "
"advanced methods, we found it to be remarkably accurate after calibration. "
"As long as wheel speeds and acceleration are kept below the point where "
"they'd slip under normal conditions, this proves to be a suitable odometry "
"method for the limitations of the 15 second autonomous period, especially "
"when combined with other sensors to “close the loop” on navigation."
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:39
#: d08291b50b5846278e8f96ba32791fce
msgid ""
"In this formulation of forward kinematics, we start from a position where we"
" assume we know our wheel speeds and wheel angles; call them with "
":math:`ws_{FR}`, :math:`ws_{FL}`, :math:`wa_{RL}`,and so on, with F/R and "
"L/R again representing front/rear and left/right. Using motors that have a "
"built in encoder, such as CTRE Falcon 500s or REV Neos, is advantageous for "
"determining wheel speed."
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:44
#: 0407be8ada1c41e1a48eccbb20f32b22
msgid ""
"We do need to make sure we've consistent, physically meaningful values for "
"our wheel speeds. Whether we're using encoders built into the motor or ones "
"installed manually, they're likely putting out some counter of ticks, or "
"count of revolutions, or some speed of ticks/second or revolutions/second. "
"We'll need to use this in combination with our drivetrain reduction and "
"wheel diameter to get some conversion rate, and thus be able to get our "
"wheel speeds in units of distance per time, like in/sec, ft/sec, or m/sec."
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:51
#: a8d821de57114d58bcd0859b374ce4a6
msgid ""
"We can first calculate A, B, C, and D values from our wheelspeeds and "
"angles, but this time, we're going to calculate them for each wheel. These "
"will be in units of velocity (distance per me), as we're simply multiplying "
"our wheel speed (which has those units) by an angle component."
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:55
#: ab1d371e38204b8fb75fe26ddd0404b5
msgid ""
"B_{FL} = sin(wa_{FL}) * ws_{FL}\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:56
#: 656dc384661c4d7ca66a6c8fd34e5d86
msgid ""
"D_{FL} = cos(wa_{FL}) * ws_{FL}\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:57
#: ba04264c95ce49449b93bb0869789dd8
msgid ""
"B_{FR} = sin(wa_{FR}) * ws_{FR}\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:58
#: 8f04255a785e4ba5955a72cd8e0ae9f1
msgid ""
"C_{FR} = cos(wa_{FR}) * ws_{FR}\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:59
#: 0bdb9a347a274e53b00eca8a82ecd16a
msgid ""
"A_{RL} = sin(wa_{RL}) * ws_{RL}\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:60
#: c93590c923d3431ea29f96ca70bc853b
msgid ""
"D_{RL} = cos(wa_{RL}) * ws_{RL}\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:61
#: 9388b824105d4669a177ea980226fad1
msgid ""
"A_{RR} = sin(wa_{RR}) * ws_{RR}\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:62
#: a54e48f16eae456d8c9c357538e77feb
msgid ""
"C_{RR} = cos(wa_{RR}) * ws_{RR}\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:64
#: b024c45dab044bbdb3c3820a752499ce
msgid ""
"Well that wasn't much help with simplifying our variables! In order to make "
"this more reasonable, we're going to do some averaging. For each value of A,"
" B, C, and D, we're going to take the two values we have, and average them. "
"These averaged values will still have units of velocity, as they're just "
"averaging two other velocity values."
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:69
#: ec9e627dab3646bebe75a0ebbff54694
msgid ""
"A = (A_{RR} + A_{RL})/2\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:70
#: 062bbe7215ba4ee4a310a2b71b736bf9
msgid ""
"B = (B_{FL} + A_{FR})/2\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:71
#: 8c92b5f399d44001b4d1b155e8bd722e
msgid ""
"C = (C_{FR} + C_{RR})/2\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:72
#: 56490c0820d842af827e23ba657e1bf1
msgid ""
"D = (D_{FL} + D_{RL})/2\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:74
#: 795ae6759af84e21a5ef6a5a90991437
msgid ""
"Excellent, that's brought our complexity down some. Now we need to find our "
"rotational velocity, or ROT. For this, we need physically accurate "
"measurements of what we earlier defined as the length and width of our "
"wheelbase, L and W. Then, we'll calculate the possible rotational velocity "
"from our knowledge about the front/back (A/B) and left/right (C/D) "
"velocities, and average those again to get a single value. Note that it's "
"also possible to get this ROT value (which should be in radians/second) from"
" a gyroscope, which we should already have on our robot so we can drive "
"field-centric."
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:81
#: cfef495b8f684562b0d652f3c957e120
msgid ""
"ROT_{1} = (B − A)/L\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:82
#: 9e4da1a472104fa5acb0b5441c801c85
msgid ""
"ROT_{2} = (C − D)/W\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:83
#: 4e49bf5afd4c45e692167c7a646741d4
msgid ""
"ROT = (ROT_{1} + ROT_{2})/2\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:85
#: f53fa0fefe4e4c1193edf16a6ecd25f1
msgid ""
"From here, we're simply going to incorporate this with our geometry and A, "
"B, C, D values to obtain (again) two values each for forward and strafe "
"velocities, and average them to get our final estimates of forward and "
"strafe speed."
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:89
#: 9ad293760cb2448c85e5875be377b3ce
msgid ""
"FWD_{1} = ROT * (L/2) + A\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:90
#: 66c562eafcd1489c913a8c67f5e3d1ea
msgid ""
"FWD_{2} = − ROT * (L/2) + B\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:91
#: 8c0e1e24a2eb46939ec7972df21b9b4a
msgid ""
"FWD = (FWD_{1} + FWD_{2})/2\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:93
#: 31d3460aa8054809b5715ff5eb081082
msgid ""
"STR_{1} = ROT * (W/2) + C\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:94
#: bb28ab33262241d995c6f28b02d2aa75
msgid ""
"STR_{2} = − ROT * (W/2) + D\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:95
#: 314830aeb43e487383faa97ee1f344ec
msgid ""
"STR = (STR_{1} + STR_{2})/2\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:97
#: 3e49419455054f77bb53c10e68af5cbb
msgid ""
"Great! Now we've got something to work with. If we want our distance values "
"to be usefu l, though, these velocities should be transformed so they're "
"field-centric. Back to our trusty field centric transformation, we'll again "
"need our angle relative to the field, usually provided by a gyroscope."
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:101
#: 30cfbb2301374d3eabb678ffbd2c42e2
msgid ""
"FWD_{new} = FWD * cos(θ) + STR * sin(θ)\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:102
#: eb03523eb55d49c08abf69341e83a7cf
msgid ""
"STR_{new} = STR * cos(θ) − FWD * sin(θ)\n"
"\n"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:105
#: b5913b26d6c143f49976fd39ecc9c9f9
msgid "Odometry"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:106
#: 73fa548ca4a74c7c938dc2869d096c42
msgid ""
"From there, we can now figure out how fast we're actually going along the "
"field - pretty nifty! To get to a position, we just need to integrate these "
"over time. This is as simple as initializing a timer and comparing its value"
" at the current loop run to its value in the previous run to determine our "
"timestep . For most robot code, this timestep is somewhere around 0.020 "
"seconds, or 20 milliseconds; however, this is only a nominal value, and it "
"can vary up and down (mostly up) depending on the behavior of the robot's "
"code. In any case, we can take this timestep and our speed and integrate it "
"into an accumulator value to get our position relative to where we started "
"counting."
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:120
#: 1c4e1c15938846608a141ad5128ec5a1
msgid ""
"We're calling our axis associated with strafing along and our axis "
"associated with moving forward or back across. This turned out to facilitate"
" communication within our team more easily than axis conventions like x/y/z."
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:124
#: 101bb2d2890b494a893e2b911479c966
msgid ""
"We now have our odometry. When using it in autonomous routines, we reset "
"this value to zero at the start, and consider our coordinates relative to "
"where the robot starts. This means robot positioning is very important, as "
"any error will be carried through the odometry."
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:128
#: f772b9ffc0554fb38eec047f8fbbffb2
msgid ""
"When you add the change every cycle, you always know where that wheel is. "
"The same is done for the other 3 wheels. We use that information to find the"
" center of the robot. The direction that the robot is facing could also be "
"determined in the same manner, but we chose to use our gyros for that. We "
"only store the current position of the center of the robot. We do , however,"
" send that position to the dashboard and record the data there. We are able "
"to graph out the position that the robot reported and impose it over a map "
"of the field to allow us to make improvements to our autons even without "
"having access to the robot."
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:136
#: 6f13ed2eeb374d8db5e04338ae62308d
msgid ""
"The next part of the puzzle is to tell the robot where to go next. We "
"reverse the tracking process to instruct each wheel on where to go next. We "
"input the desired x,y coordinate into the subroutine. The angle that each "
"wheel needs to face is calculated. The angle will be the same for all wheels"
" unless the robot is going to spin while moving. If the robot will be "
"changing heading while moving, the amount of turn correction will be "
"factored in causing the wheels to face different directions and have "
"different relative speeds until the spin portion is achieved. We use a "
"positioning loop to assign the wheel speed. We are only using kP * error. We"
" can change states by several different criteria. We might use an achieved "
"distance, an intake sensor, or a targeting feedback to tell the robot that "
"it is done with that task. The robot then moves on to the next task."
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:147
#: ff27a2f2bc1447439ef61a89d85b1a36
msgid "Calibration"
msgstr ""

#: ../../source/docs/software-info-old/swerve-in-auton/the-math.rst:148
#: 26bb89517a774a84b027386b89dd4393
msgid ""
"If we used our nominal wheel diameters and gear ratios, these values should "
"be pretty close to real-world values, but they probably won't be perfect. "
"We'll want to calibrate our overall speeds by applying a multiplier. This "
"calibration can be as simple as marking off a set distance (the longer the "
"better) and driving the robot across this distance, keeping it as straight "
"as possible. Once the distance is reached, the reported distance value can "
"be compared with the actual distance value and ratioed to produce a "
"correction factor - actual distance over reported distance. This can also be"
" used to account for wheel wear, which changes the effective wheel diameter "
"and can cause inaccurate distance measurements when not accounted for."
msgstr ""
